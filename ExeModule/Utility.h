#pragma once
#include <Windows.h>
#include <cstdlib>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <codecvt>
#include <ctime>
#include <vector>
#include <algorithm>
#include <iterator>

wchar_t* ctow(wchar_t *pwstr, const char *str);
void byte2Hex(unsigned char bData, unsigned char hex[]);

class BinaryData {
private:
	char *data;
	bool is_empty;
	std::size_t size;
	void allocate(std::size_t sz, const char *src);
	void erase(std::size_t start, std::size_t end, bool eat);
	void insert(std::size_t start, const char *src, std::size_t len);
	long long modexp(long long a, long long b, long long n);
	std::size_t rabin_karp_find(char *src, std::size_t src_len, char *pattern, std::size_t p_len);
	std::size_t find(char *d, std::size_t len);
	BinaryData get_between(char *t1, std::size_t t1len, char *t2, std::size_t t2len);
public:
	enum State { OpenFail, WriteFail, Success };
	const std::size_t null_pos = -1;
	BinaryData();
	BinaryData(const BinaryData &bd);
	BinaryData(size_t sz, const char *src);
	~BinaryData();
	friend bool operator==(const BinaryData &bd1, const BinaryData &bd2);
	friend bool operator!=(const BinaryData &bd1, const BinaryData &bd2);
	char& operator[](const std::size_t index);
	const char& operator[](const std::size_t index)const;
	friend BinaryData operator+(const BinaryData &bd1, const BinaryData &bd2);
	BinaryData& operator+=(const BinaryData& bd);
	BinaryData& operator=(const BinaryData &rhs);
	char* GetData() const;
	State ReadFromDirectory(char *path);
	State SaveToFile(char *path);
	void SetData(char *src, std::size_t len);
	void Assign(char *src, std::size_t len, std::size_t start, std::size_t end);
	void Remove(std::size_t start, std::size_t len = 0);
	void Delete(std::size_t start, std::size_t len = 0);
	size_t GetSize() const;
};

class JPGFileProcess {
private:
	static const size_t JPGLength = 669;
	const unsigned char JPGData[JPGLength] = { 0xFF,0xD8,0xFF,0xE0,0x00,0x10,0x4A,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0xC0,
		0x00,0xC0,0x00,0x00,0xFF,0xE1,0x00,0x22,0x45,0x78,0x69,0x66,0x00,0x00,0x4D,0x4D,
		0x00,0x2A,0x00,0x00,0x00,0x08,0x00,0x01,0x01,0x12,0x00,0x03,0x00,0x00,0x00,0x01,
		0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xDB,0x00,0x43,0x00,0x02,0x01,0x01,
		0x02,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x03,0x05,0x03,0x03,0x03,
		0x03,0x03,0x06,0x04,0x04,0x03,0x05,0x07,0x06,0x07,0x07,0x07,0x06,0x07,0x07,0x08,
		0x09,0x0B,0x09,0x08,0x08,0x0A,0x08,0x07,0x07,0x0A,0x0D,0x0A,0x0A,0x0B,0x0C,0x0C,
		0x0C,0x0C,0x07,0x09,0x0E,0x0F,0x0D,0x0C,0x0E,0x0B,0x0C,0x0C,0x0C,0xFF,0xDB,0x00,
		0x43,0x01,0x02,0x02,0x02,0x03,0x03,0x03,0x06,0x03,0x03,0x06,0x0C,0x08,0x07,0x08,
		0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
		0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
		0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
		0x0C,0x0C,0xFF,0xC0,0x00,0x11,0x08,0x00,0x01,0x00,0x01,0x03,0x01,0x22,0x00,0x02,
		0x11,0x01,0x03,0x11,0x01,0xFF,0xC4,0x00,0x1F,0x00,0x00,0x01,0x05,0x01,0x01,0x01,
		0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,
		0x06,0x07,0x08,0x09,0x0A,0x0B,0xFF,0xC4,0x00,0xB5,0x10,0x00,0x02,0x01,0x03,0x03,
		0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7D,0x01,0x02,0x03,0x00,0x04,
		0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,0x22,0x71,0x14,0x32,0x81,
		0x91,0xA1,0x08,0x23,0x42,0xB1,0xC1,0x15,0x52,0xD1,0xF0,0x24,0x33,0x62,0x72,0x82,
		0x09,0x0A,0x16,0x17,0x18,0x19,0x1A,0x25,0x26,0x27,0x28,0x29,0x2A,0x34,0x35,0x36,
		0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x53,0x54,0x55,0x56,
		0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x73,0x74,0x75,0x76,
		0x77,0x78,0x79,0x7A,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x92,0x93,0x94,0x95,
		0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xB2,0xB3,
		0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,
		0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,
		0xE8,0xE9,0xEA,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFF,0xC4,0x00,
		0x1F,0x01,0x00,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
		0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0xFF,0xC4,
		0x00,0xB5,0x11,0x00,0x02,0x01,0x02,0x04,0x04,0x03,0x04,0x07,0x05,0x04,0x04,0x00,
		0x01,0x02,0x77,0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,
		0x07,0x61,0x71,0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,0xA1,0xB1,0xC1,0x09,0x23,
		0x33,0x52,0xF0,0x15,0x62,0x72,0xD1,0x0A,0x16,0x24,0x34,0xE1,0x25,0xF1,0x17,0x18,
		0x19,0x1A,0x26,0x27,0x28,0x29,0x2A,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,
		0x46,0x47,0x48,0x49,0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,
		0x66,0x67,0x68,0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x82,0x83,0x84,
		0x85,0x86,0x87,0x88,0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,
		0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,
		0xBA,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,
		0xD8,0xD9,0xDA,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF2,0xF3,0xF4,0xF5,
		0xF6,0xF7,0xF8,0xF9,0xFA,0xFF,0xDA,0x00,0x0C,0x03,0x01,0x00,0x02,0x11,0x03,0x11,
		0x00,0x3F,0x00,0xFE,0x7F,0xE8,0xA2,0x8A,0x00,0xFF,0xD9,0x0D,0x0A };
public:
	BinaryData GenerateSingleJPGFile(BinaryData &src);
	std::vector<BinaryData> GenerateJPGFiles(BinaryData &src, size_t SingleSizeLimit);
};

class Crypto {
private:
	std::string generate_10_rand();
	char alpha_offset(char c, int k);
	char recover_alpha_offset(char c, int k);
public:
	const int TiebaObfuscateKeyLength = 10;
	enum ObfuscateType { Base64Tieba };
	bool Base64Encode(IN BinaryData *input, OUT BinaryData *output);
	bool Base64Decode(IN BinaryData *input, OUT BinaryData *output);
	std::string TextObfuscate(IN BinaryData *input, OUT std::string *key, IN ObfuscateType Type = Base64Tieba);
	std::string DecodeTextObfuscate(IN BinaryData *input, IN std::string *key, IN ObfuscateType Type = Base64Tieba);
};

typedef std::vector<std::pair<std::string, std::string>> MailList;
class InternetUtility {
public:
	const int KeywordLength = 16;
	const int TiebaObfuscateKeyLength = 10;
	const std::string WebMessagePage404 = "[!ErrorMsg]web utility message: 404 Not Found";
	const std::string WebMessageOpenFail = "[!ErrorMsg]web utility message: Fail to open";
	const std::string POJHostName = "poj.org";
	const std::string WeiboHostName = "weibo.com";
	const std::string WeiboHuati = "http://huati.weibo.com/k/";
	const std::string POJLoginPage = "http://poj.org/login";
	const std::string POJMainPage = "http://poj.org/";
	const std::string POJRegisterPage = "http://poj.org/register";
	const std::string POJSendPage = "http://poj.org/send";
	const std::string POJMailPage = "http://poj.org/mail";
	const std::string BaiduNews = "http://m.news.baidu.com/news";
	const std::string TietuHostName = "tietuku.com";
	const std::string TietuUploadPage = "http://www.tietuku.com/upload";
	const std::string TietuMainPage = "http://www.tietuku.com";
	const std::string TietuAPIHost = "up.imgapi.com";
	const std::string TietuUploadAPI = "http://up.imgapi.com/";
	const std::string TiebaUrl = "http://tieba.baidu.com/p/";
	enum State {
		Offline, Online, ModemConnected, LANConnected, ProxyConnected, ModemBusy,	//Internet Connection State
		WebOpenError, Success,														//Web page state
		InitError, ConnectionError, SendError, RecvError,							//Socket State
		POJOpenError, POJRegisterFail, POJLoginFail, POJSendFail, POJGetMessageFail,//POJ State
		TietuOpenError																//Tietuku State
	};
	int CheckInternetState();
	int CheckInternetConnection();
	bool CheckUrlConnection(std::string url);
	std::string GetWebSource(const char *Url, bool ConvertFromUtf8 = false);
	int Download(const char *Url, BinaryData &output);
	int PostAndReceive(IN std::string hostname, std::string api, IN std::string parameter, OUT std::string &receive, IN std::string Cookie = "", IN bool fHeader = true);
	int GetAndReceive(IN std::string hostname, std::string api, IN std::string parameter, OUT std::string &receive, IN std::string Cookie = "", IN bool fHeader = true);
	int HttpRequest(IN std::string method, std::string hostname, std::string api, IN std::string parameter, OUT std::string &receive, IN std::string Cookie = "", IN bool fHeader = true);
	//Baidu Tieba control
	std::string RandFromTieba(std::string id);
	std::string GetMessageFromTiebaTopic(std::string Url);
	State GenerateKeywordFromBaiduNews(int length, std::string &key, size_t offset = 0);
	//POJ control
	std::string GetHostNameFromUrl(std::string Url);
	int LoginPOJGetJSession(IN std::string Username, IN std::string UserPwd, OUT std::string &JSession, bool Extract = false);
	int LoginPOJGetJSessionNoCookie(IN std::string Username, IN std::string UserPwd, OUT std::string &JSession, bool Extract = false);
	int RegisterPOJAccount(std::string &Username, std::string &Password);
	int SendMessageToPOJAccount(IN std::string DestAccount, IN std::string SrcAccount, IN std::string SrcPasswd, IN std::string Title, IN std::string Content);
	int LoginGetPOJMailList(std::string UserName, std::string UserPwd, OUT MailList &mailList, OUT std::string &JSession);
	int GetPOJMailListWithJSession(IN std::string JSession, OUT MailList &mailList);
	//tietuku.com, file upload
	int UploadJPGToTietuku(BinaryData &jpgData, OUT std::string &Url);
	int UploadFileToTietuku(BinaryData &Data, std::size_t SingleFileSizeLimit, OUT std::string &SummaryUrl);
	int GetJPGData(IN std::string JPGUrl, OUT BinaryData &Data);
	int GetTietukuDataBySummary(IN std::string SummaryUrl, OUT BinaryData &Data);
	//Sina
	int GetMessageFromSina(IN std::string keyword, OUT std::vector<std::string> &Message);
private:
	std::string UTF8_To_string(const std::string & str);
	std::string ReadUntil(std::string &in, size_t start_pos, char until);
};